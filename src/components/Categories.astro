---
export const prerender = false;

import { getLiveCollection } from 'astro:content';
import { LiveCollectionValidationError } from 'astro/content/runtime';
import type { Category } from '../loaders/categories-loader';

const { entries: categories, error } = await getLiveCollection('categories', { parentSlug: 'locks'  });
console.log("üöÄ ~ categories:", categories)

if (LiveCollectionValidationError.is(error)) {
  console.log("üöÄ ~ Categories component ~ shema validation errors:", error)
} else if (error) {
  console.log("üöÄ ~ Categories component ~ error:", error)
}

const categoriesBlobStorageUrl = `${import.meta.env.PUBLIC_BLOB_STORAGE_CATEGORIES_URL}`
console.log("üöÄ ~ Categories component ~ blob storage url:", categoriesBlobStorageUrl)
---

<div class="px-4 pt-4 bg-base-100">
  <h3 class="text-lg font-bold text-center lg:text-left">–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤:</h3>
  <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-5 py-2 ">
    {categories && categories.map(
      x => {
        const item = x as unknown as Category;
        return (<div class="card bg-base-100 w-auto shadow-sm">
          <figure class="px-10 pt-10">
            <img
              src=`${categoriesBlobStorageUrl}/${item.image}`
              alt=`${item.title}`
              class="rounded-xl" />
          </figure>
          <div class="card-body items-center text-center">
            <span class="card-title">{item.title}</span>
            {item.description && <p>{item.description}</p>}
          </div>
        </div>);
      })
    }
  </div>
  {!categories && <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—Ç—É—Å—Ç–≤—É—é—Ç</span>}
</div>
