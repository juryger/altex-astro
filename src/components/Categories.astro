---
export const prerender = false;

import { Image } from 'astro:assets';
import { getTextHandler } from '../core/helpers/text-utils';
import { LiveCollectionNames } from '../core/const';
import { getCollectionByFilter } from '../core/helpers/live-collection-manager';
import type { Category } from '../core/models/category';
import { defaultPaging } from '../core/models';

interface Props {
  parentSlug?: string;
}

const { parentSlug } = Astro.props;

var categories = await getCollectionByFilter<Category>(LiveCollectionNames.Categories, {
    parentSlug,
    ignoreParent: false,
    paging: defaultPaging
  }).then(result => {
    if (!result.value) console.log("üöÄ ~ Categories component ~ collection not found");
    return result.value as { id: string, data: Category }[] | undefined;
  }).catch(reason => console.error(reason));

const textHandler = getTextHandler();
const categoriesBlobStorageUrl = `${import.meta.env.PUBLIC_BLOB_STORAGE_CATEGORIES_URL}`
console.log("üöÄ ~ Categories component ~ blob storage url: %s, data: %o", categoriesBlobStorageUrl, categories)
---

<div class="mx-4 bg-base-100">
  <h3 class="text-lg font-bold text-center lg:text-left">–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤</h3>
  <div class="grid grid-cols-1 sm:grid-col-2 md:grid-cols-3 lg:grid-cols-5 gap-5 py-2">
    {categories && categories.map(x => {
      const item = x.data;
      return (
        <div class="card bg-base-200 w-auto shadow-sm">
          <a class="no-underline" href=`/catalog/categories/${item.slug}`>     
            <figure class="px-1 pt-2.5">
              <Image src=`${categoriesBlobStorageUrl}/${item.image}` alt=`${item.title}` width="75" height="75" class="rounded-xl"/>
            </figure>
            <div class="card-body items-center text-center !px-1 !py-1">
              <span class="card-title text-sm font-bold" title={item.title}>
                {textHandler.trimEnd(item.title, 21)}
              </span>
              {item.description && <p>
                <span title={item.description}>
                  {textHandler.trimEnd(item.description, 100)}
                </span>
              </p>}
            </div>
          </a>
        </div>);
      })
    }
  </div>
  {(!categories || categories.length == 0) && <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—Ç—É—Å—Ç–≤—É—é—Ç</span>}
</div>