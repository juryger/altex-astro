---
import { type PathItem } from '../types/common';
import PathMapper from '../utils/pathMapper';

const { currentPath } = Astro.props;
const pathMapper = new PathMapper();

const getBreadcrumbs = (path: string): Array<PathItem> => {
  console.log('breadcrumbs > original ' + path);
  const splitPath = path.split('/');
  console.log('breadcrumbs > split ' + splitPath);
  if (path.endsWith("/")) splitPath.pop();
  
  var result: Array<PathItem> = [];
  while(splitPath.length > 0) { 
    const pathItem =  `/${splitPath.pop()}`;
    console.log('breadcrumbs > pathItem > ' + pathItem);
    result.push({ path: pathItem, displayValue: pathMapper.getDispalyValueForPath(pathItem)});
  }
  
  return result;
}

const breadcrumbs: Array<PathItem> = getBreadcrumbs(currentPath).reverse();
console.log('breadcrumbs > parsed ' + JSON.stringify(breadcrumbs));
---

<div class="breadcrumbs text-sm px-5">
  {breadcrumbs.length > 1 && <ul class="list-disc">
      {breadcrumbs && breadcrumbs.map((x: PathItem, index: number) => (
        <li>
          {(index !== breadcrumbs.length - 1) ? <a href={x.path}>{x.displayValue}</a> : <span class="!no-underline !cursor-default">{x.displayValue}</span>} 
        </li>
      ))}
    </ul>}
</div>