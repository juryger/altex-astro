---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Breadcrumbs from '../components/Breadcrumbs.astro';

const { title } = Astro.props;
const currentPath = Astro.url.pathname;
const MainTitle = `–ê–õ–¢–ï–• - ${title}`;
---

<script>
	/*
	import { getWorkerFactory, type WorkerFactory, type WorkerInfo } from "../core/factories/worker-factory";
	import { getLocalStorageManager } from "../core/helpers/local-storage-manager"; 
	import { CatalogSyncType, type CatalogSyncStatus } from "../core/models/catalog-sync";
	*/
	
	// Need to open API endpoint for public, postponed
	/*
	const localStorageManager = getLocalStorageManager();

	const processWorkerMessage = (msg: MessageEvent<any>, factory: WorkerFactory, workerName: string): void => {
		const syncStatus = msg.data as CatalogSyncStatus;
			if (!msg.data || !syncStatus) {
				console.error("üöÄ ~ BaseLayout ~ recieved message from the Catalog sync worker of unsupported type:", msg.data);
				return;
			}
			console.log("üöÄ ~ BaseLayout ~ catalog sync status updated:", syncStatus);
			switch (syncStatus.syncType)
			{
				case CatalogSyncType.Sync:
					localStorageManager.setLastSyncDate(new Date());
						localStorageManager.setCatalogSyncInProgress(false);
					break;
				case CatalogSyncType.CleanUpCache:
					localStorageManager.setCatalogSyncInProgress(false);
					localStorageManager.setCatalogSyncPostponed(true);
					break;
				default:
					console.error("üöÄ ~ BaseLayout ~ recieved message from the Catalog sync worker of unsupported sync type:", syncStatus);
					break;
			}
			factory.terminateWorker(window.workers, workerName);
	}

	const processWorkerError = (err: ErrorEvent, factory: WorkerFactory, workerName: string): void => {
		console.error("üöÄ ~ BaseLayout ~ Failed to sync catalog data:", err.message);
		localStorageManager.setCatalogSyncInProgress(false);
		factory.terminateWorker(window.workers, workerName);
	}

	if (localStorageManager.checkCataloSyncRequired(7)) {
		console.log("üöÄ ~ BaseLayout ~ Catalog data is outdated, preaparing for syncing.");
		window.workers = window.workers ?? {} as WorkerInfo;
		const factory = getWorkerFactory(window.workers);
		
		const catalogSyncWorker = factory.findOrCreateCatalogSyncWorker(
			(msg, workerName) => processWorkerMessage(msg, factory, workerName), 
			(err, workerName) => processWorkerError(err, factory, workerName)
		);
		
		localStorageManager.setCatalogSyncInProgress(true);
		localStorageManager.setCatalogSyncPostponed(false);
		catalogSyncWorker.postMessage(CatalogSyncType.Sync); // use CatalogSyncType.CleanUpCache if syncing not required
	} else {
		console.log("üöÄ ~ BaseLayout ~ Catalog data is up to date, syncing is not required.");
	}
	*/
</script>

<!doctype html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{MainTitle}</title>
	</head>
	<body>
		<Header />
		<Breadcrumbs currentPath={currentPath} />
		<div class="mx-auto max-w-7xl px-4 py-3">
			<slot />
		</div>
		<Footer />
	</body>
</html>
