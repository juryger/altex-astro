import type { APIRoute } from "astro";
import type { Category } from "../../../core/models/category";

export const prerender = false;

export const GET: APIRoute = async ({ params /*, request*/ }) => {
  console.log("üöÄ ~ GET ~ category ~ params:", params);
  const { slug } = params;

  // TODO: query database for category by slug

  if (!slug) {
    return new Response(null, {
      status: 404,
      statusText: "Not found",
    });
  }

  var item: Category | undefined;
  switch (slug) {
    case "locks":
      item = {
        id: 1,
        title: "–ó–∞–º–æ—á–Ω–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞",
        description: "–ó–∞–º–∫–∫–∏ –∏ –ø—Ä–æ—á–µ–µ",
        image: "locks.png",
        slug: "locks",
      };
      break;
    case "tools":
      item = {
        id: 2,
        title: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        description: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∞–¥–∞ –∏ —Ö–æ—è–∑—è–π—Å—Ç–≤–∞",
        image: "tools.png",
        slug: "tools",
      };
      break;
    case "padlocks":
      item = {
        id: 3,
        title: "–ù–∞–≤–µ—Å–Ω—ã–µ –∑–∞–º–∫–∏",
        description: "–ù–∞–≤–µ—Å–Ω—ã–µ –∑–∞–º–∫–∏ –∏ –ø—Ä–æ—á–µ–µ",
        image: "padlocks.png",
        slug: "padlocks",
        parentId: 1,
        parentSlug: "locks",
      };
      break;
    default:
      return new Response(null, {
        status: 404,
        statusText: "Not found",
      });
  }

  return new Response(JSON.stringify(item), {
    status: 200,
    headers: {
      "Content-Type": "application/json",
    },
  });
};
